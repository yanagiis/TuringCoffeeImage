#!/bin/bash -x
# Setup script error handling see /blog/another-bash-strict-mode/ for details
set -uo pipefail
trap 's=$?; echo "$0: Error on line "$LINENO": $BASH_COMMAND"; exit $s' ERR
IFS=$'\n\t'

# Ensure we are root
if [[ $EUID -ne 0 ]]; then
    echo "This script must be run as root" 1>&2
    exit 1
fi

# Some useful constants
mount="mnt" # Local directory to mount the image (automatically created/delete as needed)
script="setup" # Local setup script to run inside the image
rpi_name="DietPi_RPi-armv6-(Jessie)"
rpi_image="DietPi_v150_RPi-armv6-(Jessie).img"
rpi_tar="${rpi_name}.7z"
rpi_url="http://dietpi.com/downloads/images/${rpi_tar}"

packages="Package.list"

# Tasks to run when the shell exits for any reason, unmount the image and 
# general cleanup
cleanup() {
    [[ -f "${mount}/tmp/${script}" ]] && rm "${mount}/tmp/${script}"
    if [[ -d "${mount}" ]]; then
        umount "${mount}/dev" || true
        umount "${mount}/proc" || true
        umount "${mount}/sys" || true
        umount "${mount}/boot" || true
        umount "${mount}" || true
        rmdir "${mount}" || true
    fi
    losetup -D
}
trap cleanup EXIT

[ ! -d "${mount}" ] && mkdir -p "${mount}"

# Download archlinux arm only if we have not already done so
[ ! -f "${rpi_tar}" ] && wget "${rpi_url}"
img_size=$(stat -c%s ${rpi_image})
[ ${img_size} -eq 552599552 ] && dd if=/dev/zero bs=1M count=1024 >> ${rpi_image}

# Install dietbian to the image
[ ! -f "${rpi_image}" ] && 7z -aoa e "${rpi_tar}"
losetup -o $((8192*512)) /dev/loop0 "${rpi_image}"
losetup -o $((137216*512)) /dev/loop1 "${rpi_image}"

mount /dev/loop1 "${mount}"
mount /dev/loop0 "${mount}/boot"

# Enable SPI
sed -i 's/spi=off/spi=on/g' ${mount}/boot/config.txt

# Copy our installation script to the mount so it can be run in the chroot
install -Dm755 "${script}" "${mount}/tmp/${script}"
install -Dm755 "${packages}" "${mount}/tmp/${packages}"

# Prepare the chroot
[ ! -d "${mount}/proc" ] && mkdir -p ${mount}/proc
[ ! -d "${mount}/sysfs" ] && mkdir -p ${mount}/sysfs
[ ! -d "${mount}/dev" ] && mkdir -p ${mount}/dev

mount -t proc none ${mount}/proc
mount -t sysfs none ${mount}/sys
mount -o bind /dev ${mount}/dev

rm ${mount}/etc/resolv.conf
cp /etc/resolv.conf ${mount}/etc/resolv.conf
cp /usr/bin/qemu-arm-static ${mount}/usr/bin/

# Run the setup script inside the chroot
chroot ${mount}  "/tmp/${script}"
